Claro! Vou te mostrar como carregar e usar spritesheets com XML em Java. Vamos supor que você tenha um arquivo XML que define as coordenadas dos sprites dentro da spritesheet. Aqui está um exemplo básico:

Exemplo de XML (sprites.xml)

<spritesheet imagePath="spritesheet.png">
    <sprite name="player_idle" x="0" y="0" width="32" height="32"/>
    <sprite name="player_run1" x="32" y="0" width="32" height="32"/>
    <sprite name="player_run2" x="64" y="0" width="32" height="32"/>
</spritesheet>
Código Java para carregar e usar a spritesheet
Dependências: Certifique-se de ter as bibliotecas necessárias para manipulação de XML e imagens. Você pode usar javax.xml.parsers para XML e java.awt para imagens.

Classe Sprite: Uma classe para armazenar informações sobre cada sprite.


public class Sprite {
    private String name;
    private int x, y, width, height;

    public Sprite(String name, int x, int y, int width, int height) {
        this.name = name;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    // Getters
    public String getName() { return name; }
    public int getX() { return x; }
    public int getY() { return y; }
    public int getWidth() { return width; }
    public int getHeight() { return height; }
}
Classe SpriteSheet: Uma classe para carregar e armazenar os sprites.

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class SpriteSheet {
    private BufferedImage sheet;
    private Map<String, Sprite> sprites;

    public SpriteSheet(String xmlPath) throws Exception {
        sprites = new HashMap<>();
        loadFromXML(xmlPath);
    }

    private void loadFromXML(String xmlPath) throws Exception {
        File xmlFile = new File(xmlPath);
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(xmlFile);
        doc.getDocumentElement().normalize();

        String imagePath = doc.getDocumentElement().getAttribute("imagePath");
        sheet = ImageIO.read(new File(imagePath));

        NodeList nodeList = doc.getElementsByTagName("sprite");
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            String name = element.getAttribute("name");
            int x = Integer.parseInt(element.getAttribute("x"));
            int y = Integer.parseInt(element.getAttribute("y"));
            int width = Integer.parseInt(element.getAttribute("width"));
            int height = Integer.parseInt(element.getAttribute("height"));
            sprites.put(name, new Sprite(name, x, y, width, height));
        }
    }

    public BufferedImage getSprite(String name) {
        Sprite sprite = sprites.get(name);
        if (sprite == null) return null;
        return sheet.getSubimage(sprite.getX(), sprite.getY(), sprite.getWidth(), sprite.getHeight());
    }
}
Uso da SpriteSheet:

public class Main {
    public static void main(String[] args) {
        try {
            SpriteSheet spriteSheet = new SpriteSheet("path/to/sprites.xml");
            BufferedImage playerIdle = spriteSheet.getSprite("player_idle");

            // Aqui você pode usar playerIdle como quiser, por exemplo, desenhá-lo em um JPanel
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Este exemplo básico deve te ajudar a começar a trabalhar com spritesheets e XML em Java. Se precisar de mais detalhes ou tiver alguma dúvida, estou aqui para ajudar!